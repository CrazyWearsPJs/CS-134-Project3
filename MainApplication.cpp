/*
-----------------------------------------------------------------------------
Filename:    %ProjectName:l%.%CppSourceSuffix%
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for QtCreator (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "MainApplication.h"
#include "GameEntity.h"
#include "Player.h"
#include "Enemy.h"
#include "Projectile.h"

#include <iostream>
using namespace std;
#include <string>
//-------------------------------------------------------------------------------------
MainApplication::MainApplication(void)
{
}
//-------------------------------------------------------------------------------------
MainApplication::~MainApplication(void)
{
    mSceneMgr->destroyQuery(mQuery);
}

//-------------------------------------------------------------------------------------
void MainApplication::createScene(void)
{
    mQuery = mSceneMgr->createRayQuery(Ogre::Ray());

    mRoot -> addFrameListener(this);


    // Set the scene's ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(1.0f, 1.0f, 1.0f));

    mSceneMgr -> createEntity("Player", "RZR-002.mesh");

    mHero = new Player("Player", Ogre::Vector3::ZERO, Ogre::Vector3::ZERO);

   //Create a SceneNode and attach the Entity to it
    mSceneMgr -> getRootSceneNode() -> createChildSceneNode(mHero -> entity_name + "Node", Ogre::Vector3(0.0f, 0.0f, 0.0f));
    mSceneMgr -> getSceneNode(mHero -> entity_name + "Node") -> attachObject(mSceneMgr -> getEntity(mHero -> entity_name));


    Ogre::Light * light = mSceneMgr -> createLight("MainLight");
    light -> setPosition(20.0f, 80.0f, 50.0f);
    mSceneMgr -> getEntity(mHero -> entity_name) -> setMaterialName("Test/Red");
    cout << "Hello" << endl;
}

bool MainApplication::processUnbufferedInput(const Ogre::FrameEvent & evt)
{
    /*
    bool up = mKeyboard -> isKeyDown(OIS::KC_W),
         down = mKeyboard -> isKeyDown(OIS::KC_S),
         left = mKeyboard -> isKeyDown(OIS::KC_A),
         right = mKeyboard -> isKeyDown(OIS::KC_D);

    if(up || down || left || right)
    {
        
        mPlayer -> move(mQuery);
    }
    */
    return true;
}


bool MainApplication::frameRenderingQueued(const Ogre::FrameEvent & evt)
{
    bool ret = BaseApplication::frameRenderingQueued(evt);

    if(!processUnbufferedInput(evt)) return false;

    return ret;
}

#ifdef __cplusplus
extern "C" {
#endif

    int main(int argc, char *argv[])
    {
        // Create application object
        MainApplication app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
