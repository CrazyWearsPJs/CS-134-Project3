/*
-----------------------------------------------------------------------------
Filename:    %ProjectName:l%.%CppSourceSuffix%
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for QtCreator (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "MainApplication.h"
#include "GameEntity.h"
//-------------------------------------------------------------------------------------
MainApplication::MainApplication(void)
{
}
//-------------------------------------------------------------------------------------
MainApplication::~MainApplication(void)
{
}

//-------------------------------------------------------------------------------------
void MainApplication::createScene(void)
{
    /*
    mRoot -> addFrameListener(this);

    // Set the scene's ambient light
    // Set the scene's ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(1.0f, 1.0f, 1.0f));

    mEntity = mSceneMgr -> createEntity("Head", "ogrehead.mesh");

    // Create a SceneNode and attach the Entity to it
    mNode = mSceneMgr -> getRootSceneNode() -> createChildSceneNode("HeadNode", Ogre::Vector3(0.0f, 0.0, 25.0f));
    mNode -> attachObject(mEntity);
    mEntity -> setMaterialName("Test/Red");


    mEntity2 = mSceneMgr -> createEntity("Head2", "ogrehead.mesh");

    mNode2 = mNode -> createChildSceneNode("HeadNode2", Ogre::Vector3(200.0f, 0.0, 25.0f));
    mNode2 -> attachObject(mEntity2);

    Ogre::Light * light = mSceneMgr -> createLight("MainLight");
    light -> setPosition(20.0f, 80.0f, 50.0f);
    */
}

bool MainApplication::processUnbufferedInput(const Ogre::FrameEvent & evt)
{
    /*
    Ogre::Vector3 transVector = Ogre::Vector3::ZERO;

    if(mKeyboard -> isKeyDown(OIS::KC_U))
    {
        transVector.z += 250;
    }

    mNode -> translate(transVector * evt.timeSinceLastFrame, Ogre::Node::TS_LOCAL);
    */
    return true;
}


bool MainApplication::frameRenderingQueued(const Ogre::FrameEvent & evt)
{
    bool ret = BaseApplication::frameRenderingQueued(evt);

    if(!processUnbufferedInput(evt)) return false;

    return ret;
}

#ifdef __cplusplus
extern "C" {
#endif

    int main(int argc, char *argv[])
    {
        // Create application object
        MainApplication app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
